// File: protos/telemetry.proto
// Purpose: Defines the gRPC service and messages for telemetry reporting.

// Specifies that we are using the proto3 syntax. This must be the first non-empty line.
syntax = "proto3";

// Defines a package name, which helps to prevent naming conflicts.
package telemetry;

// This option is specific to Go. It tells the generator where the compiled Go
// package should live within our project structure.
option go_package = "odyssey/services/telemetry-service/gen/go";

// This is the "service" definition. It's like an interface or a class in OOP.
service TelemetryReporter {
  // This defines a Remote Procedure Call (RPC) named 'ReportTelemetry'.
  // It specifies a client-streaming method: the client sends a 'stream' of
  // TelemetryData messages, and the server returns a single 'ReportResponse'
  // when the client is done.
  rpc ReportTelemetry (stream TelemetryData) returns (ReportResponse) {}
}

// This defines the structure of our main data message.
message TelemetryData {
  // Each field has a type, a name, and a unique number.
  // The numbers are used for binary encoding and must not be changed once in use.
  string drone_id = 1;
  string timestamp = 2; // We'll keep sending as ISO 8601 string
  double latitude = 3;
  double longitude = 4;
  double altitude = 5;
  double battery_level = 6;
  string status = 7;
}

// This defines the message the server will send back upon stream completion.
message ReportResponse {
  bool success = 1;
}