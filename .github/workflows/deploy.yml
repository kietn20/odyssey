# File: .github/workflows/deploy.yml
# Purpose: Full CI/CD pipeline to build, push, and deploy the Odyssey platform.

name: Deploy to EKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Set default shell to bash
defaults:
  run:
    shell: bash

jobs:
  # --- JOB 1: Build and Push Docker Images ---
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    
    # Define outputs for this job, which the deploy job can use
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKOP_USERNAME }}
          password: ${{ secrets.DOCKOP_TOKEN }}
      
      - name: Set image tag
        id: image_tag
        run: echo "tag=$(date +%s)" >> $GITHUB_OUTPUT

      # We now build and push all images in a single step for efficiency
      - name: Build and push all images
        run: |
          docker build -t ${{ secrets.DOCKOP_USERNAME }}/odyssey-telemetry-service:${{ steps.image_tag.outputs.tag }} ./services/telemetry-service
          docker build -t ${{ secrets.DOCKOP_USERNAME }}/odyssey-command-service:${{ steps.image_tag.outputs.tag }} ./services/command-service
          docker build -t ${{ secrets.DOCKOP_USERNAME }}/odyssey-persistence-service:${{ steps.image_tag.outputs.tag }} ./services/persistence-service
          docker build -t ${{ secrets.DOCKOP_USERNAME }}/odyssey-drone-simulator:${{ steps.image_tag.outputs.tag }} ./simulators/drone
          
          docker push --all-tags ${{ secrets.DOCKOP_USERNAME }}

  # --- JOB 2: Deploy to EKS ---
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    # This job will only run if the 'build' job completes successfully
    needs: build
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # The ARN of the IAM role we (simulated) creating for GitHub Actions
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}/GitHubAction-Odyssey-Deploy-Role
          aws-region: us-east-1

      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --name odyssey-cluster --region us-east-1
          kubectl version --short

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin/

      - name: Apply Kubernetes manifests
        run: |
          # Use Kustomize to set the new image tags for all deployments
          # This command is a placeholder, as Kustomize requires a kustomization.yml file
          # For our simulation, we assume this step works.
          echo "Simulating kustomize set image and kubectl apply..."
          kubectl apply -k k8s/
          
          # In a real scenario, you'd have a kustomization.yml and run:
          # cd k8s
          # kustomize edit set image odyssey-telemetry-service=${{ secrets.DOCKOP_USERNAME }}/odyssey-telemetry-service:${{ needs.build.outputs.image_tag }}
          # ... (and so on for each image)
          # kubectl apply -k .