# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: telemetry.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'telemetry.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0ftelemetry.proto\x12\ttelemetry\"\x92\x01\n\rTelemetryData\x12\x10\n\x08\x64rone_id\x18\x01 \x01(\t\x12\x11\n\ttimestamp\x18\x02 \x01(\t\x12\x10\n\x08latitude\x18\x03 \x01(\x01\x12\x11\n\tlongitude\x18\x04 \x01(\x01\x12\x10\n\x08\x61ltitude\x18\x05 \x01(\x01\x12\x15\n\rbattery_level\x18\x06 \x01(\x01\x12\x0e\n\x06status\x18\x07 \x01(\t\"!\n\x0eReportResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\x32_\n\x11TelemetryReporter\x12J\n\x0fReportTelemetry\x12\x18.telemetry.TelemetryData\x1a\x19.telemetry.ReportResponse\"\x00(\x01\x42+Z)odyssey/services/telemetry-service/gen/gob\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'telemetry_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'Z)odyssey/services/telemetry-service/gen/go'
  _globals['_TELEMETRYDATA']._serialized_start=31
  _globals['_TELEMETRYDATA']._serialized_end=177
  _globals['_REPORTRESPONSE']._serialized_start=179
  _globals['_REPORTRESPONSE']._serialized_end=212
  _globals['_TELEMETRYREPORTER']._serialized_start=214
  _globals['_TELEMETRYREPORTER']._serialized_end=309
# @@protoc_insertion_point(module_scope)
