// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: telemetry.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryReporterClient is the client API for TelemetryReporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryReporterClient interface {
	// This defines a Remote Procedure Call (RPC) named 'ReportTelemetry'.
	// It specifies a client-streaming method: the client sends a 'stream' of
	// TelemetryData messages, and the server returns a single 'ReportResponse'
	// when the client is done.
	ReportTelemetry(ctx context.Context, opts ...grpc.CallOption) (TelemetryReporter_ReportTelemetryClient, error)
}

type telemetryReporterClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryReporterClient(cc grpc.ClientConnInterface) TelemetryReporterClient {
	return &telemetryReporterClient{cc}
}

func (c *telemetryReporterClient) ReportTelemetry(ctx context.Context, opts ...grpc.CallOption) (TelemetryReporter_ReportTelemetryClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryReporter_ServiceDesc.Streams[0], "/telemetry.TelemetryReporter/ReportTelemetry", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryReporterReportTelemetryClient{stream}
	return x, nil
}

type TelemetryReporter_ReportTelemetryClient interface {
	Send(*TelemetryData) error
	CloseAndRecv() (*ReportResponse, error)
	grpc.ClientStream
}

type telemetryReporterReportTelemetryClient struct {
	grpc.ClientStream
}

func (x *telemetryReporterReportTelemetryClient) Send(m *TelemetryData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telemetryReporterReportTelemetryClient) CloseAndRecv() (*ReportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryReporterServer is the server API for TelemetryReporter service.
// All implementations must embed UnimplementedTelemetryReporterServer
// for forward compatibility
type TelemetryReporterServer interface {
	// This defines a Remote Procedure Call (RPC) named 'ReportTelemetry'.
	// It specifies a client-streaming method: the client sends a 'stream' of
	// TelemetryData messages, and the server returns a single 'ReportResponse'
	// when the client is done.
	ReportTelemetry(TelemetryReporter_ReportTelemetryServer) error
	mustEmbedUnimplementedTelemetryReporterServer()
}

// UnimplementedTelemetryReporterServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryReporterServer struct {
}

func (UnimplementedTelemetryReporterServer) ReportTelemetry(TelemetryReporter_ReportTelemetryServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportTelemetry not implemented")
}
func (UnimplementedTelemetryReporterServer) mustEmbedUnimplementedTelemetryReporterServer() {}

// UnsafeTelemetryReporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryReporterServer will
// result in compilation errors.
type UnsafeTelemetryReporterServer interface {
	mustEmbedUnimplementedTelemetryReporterServer()
}

func RegisterTelemetryReporterServer(s grpc.ServiceRegistrar, srv TelemetryReporterServer) {
	s.RegisterService(&TelemetryReporter_ServiceDesc, srv)
}

func _TelemetryReporter_ReportTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemetryReporterServer).ReportTelemetry(&telemetryReporterReportTelemetryServer{stream})
}

type TelemetryReporter_ReportTelemetryServer interface {
	SendAndClose(*ReportResponse) error
	Recv() (*TelemetryData, error)
	grpc.ServerStream
}

type telemetryReporterReportTelemetryServer struct {
	grpc.ServerStream
}

func (x *telemetryReporterReportTelemetryServer) SendAndClose(m *ReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telemetryReporterReportTelemetryServer) Recv() (*TelemetryData, error) {
	m := new(TelemetryData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryReporter_ServiceDesc is the grpc.ServiceDesc for TelemetryReporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryReporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.TelemetryReporter",
	HandlerType: (*TelemetryReporterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportTelemetry",
			Handler:       _TelemetryReporter_ReportTelemetry_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}
